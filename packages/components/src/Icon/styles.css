.kds-icon {
  --icon-width: var(--kds-dimension-icon-1x);
  --icon-height: var(--kds-dimension-icon-1x);
  --icon-stroke-width: var(--kds-border-width-icon-stroke-m);

  display: inline-block;
  width: var(--icon-width);
  /* min sizes, otherwise they might collapse if there is not enough space */
  min-width: var(--icon-width);
  height: var(--icon-height);
  min-height: var(--icon-height);
  vertical-align: middle;
  stroke-width: var(--icon-stroke-width);
  shape-rendering: geometricprecision;

  &.xsmall {
    --icon-width: var(--kds-dimension-icon-0-56x);
    --icon-height: var(--kds-dimension-icon-0-56x);
    --icon-stroke-width: var(--kds-border-width-icon-stroke-s);

    @media (max-resolution: 1.5dppx) {
      /* For small icons on low density screens, we can't simply set the sizes as this leads to subpixel 
      rendering issues which manifests in misaligned or 'jumping' svg content.
      Solution is to render the SVG in it's natural size (don't indirectly modify the viewBox) and instead apply a 
      CSS transform. Thus the position of the SVG elements stays intact. */
      & {
        --scaling-factor: 0.75;
        --icon-width: var(--kds-dimension-icon-0-75x);
        --icon-height: var(--kds-dimension-icon-0-75x);
        --icon-stroke-width: calc(
          var(--kds-border-width-icon-stroke-s) / var(--scaling-factor)
        );
        shape-rendering: crispEdges;
        transform: scale(var(--scaling-factor));
      }
    }
  }

  &.small {
    --icon-width: var(--kds-dimension-icon-0-75x);
    --icon-height: var(--kds-dimension-icon-0-75x);
    --icon-stroke-width: var(--kds-border-width-icon-stroke-s);
  }

  &.large {
    --icon-width: var(--kds-dimension-icon-1-25x);
    --icon-height: var(--kds-dimension-icon-1-25x);
    --icon-stroke-width: var(--kds-border-width-icon-stroke-l);
  }
}
